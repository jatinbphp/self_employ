<?php

namespace App\Http\Controllers\Frontend\Post;

use App\Http\Controllers\Controller;
use App\Http\Controllers\PusherController;
use App\Lib\PusherFactory;
use App\Models\BudgetType;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use App\Models\Category;
use App\Models\CategorySkill;
use App\Models\FlexibleTime;
use App\Models\Post;
use App\Models\AcceptOffer;
use App\Models\PostImage;
use App\Models\PostSkill;
use App\Models\UserSkill;
use App\Models\Notification;
use App\Events\NotificationEvent;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use Toastr;
use Carbon\Carbon;


class PostController extends Controller
{
    public function index()
    {
        $categories = Category::all();
        $flexibles = FlexibleTime::all();
        $bugets = BudgetType::all();
        if (Auth::check()) {
            return view('frontend.posts.post-task', ['categories' => $categories, 'flexibles' => $flexibles, 'bugets' => $bugets]);
        } else {
            Toastr::success('Please Login Before create any post', 'Success', ["positionClass" => "toast-top-right"]);
            return redirect()->route('auth.login.showform');
        }
    }

    public function getSkills(Request $request)
    {
        $skills = CategorySkill::where('category_id', $request->category_id)->get();
        if (!is_null($request->post_id)) {
            $userSkills = PostSkill::where('post_id', $request->post_id)->get()->pluck('skill_id');
        } else {
            $userSkills = UserSkill::where('user_id', $request->user_id)->get()->pluck('skill_id');
        }
        // $userSkill = [];
        // foreach ($userSkills as $skill) {
        //     $userSkill[] = $skill->skill_id;
        // }
        return response()->json(['success' => true, 'skills' => $skills, 'userSkills' => $userSkills]);
    }

    public function store(Request $request)
    {
        if ($request->isMethod('post')) {
            $validation = Validator::make($request->all(), [
                'name'          => 'required',
                'address'       => 'required',
                'category'      => 'required|not_in:0',
                'date'          => 'required_without:is_flexible',
                'before_date'   => 'required_without:is_flexible',
                'is_flexible'   => 'required_without:date',
                'certain_time'  => 'required_with:is_flexible,1',
                'flexible.*'    => 'required_with:certain_time,1',
                'description'   => 'required',
                'budget'        => 'required|not_in:0',
                'amount'        => 'required',
                //'skills'      => 'required_if:category,not_in:0',
                //'images'      => 'required'
                //'images.*'    => 'mimes:jpeg,jpg,png,gif'
            ]);

            if ($validation->fails()) {
                Toastr::error('Some Fileds are missing', 'Error', ["positionClass" => "toast-top-right"]);
                return back()->withErrors($validation)->withInput();
            }
            $data = [];

            if (isset($request->is_flexible) && !is_null($request->is_flexible)) {
                $data['is_flexible'] = true;
                if ($request->is_flexible == true) {
                    $data['certain_time'] = isset($request->certain_time) ? true : false;
                    $data['flexible_time_id'] = implode(',', $request->flexible);
                }
            } else {
                $data['date'] = $request->date;
                $data['beforedate'] = $request->before_date;
            }

            $data['name'] = $request->name;
            $data['category_id'] = $request->category;
            $data['budget_id'] = $request->budget;
            $data['address'] = $request->address;
            $data['latitude'] = $request->latitude;
            $data['longitude'] = $request->longitude;
            $data['description'] = $request->description;
            $data['amount'] = $request->amount;
            $data['status'] = 'active';
            $data['user_id'] = auth()->user()->id;

            $post = Post::create($data);

            if ($request->hasFile('images')) {
                $imageNames = multipleUploadImage($request->file('images'), storage_path('app/public/uploads/posts/post_images/'));
                foreach ($imageNames as $img) {
                    $postImage = PostImage::create(['post_id' => $post->id, 'image' => $img]);
                }
            }
            foreach ($request->skills as $skill) {
                PostSkill::create(['post_id' => $post->id, 'skill_id' => $skill]);
            }

            if ($post) {
                // $notification_data = [];
                // $notification_data['post_id'] = $post->id;
                // $notification_data['from_user'] = auth()->user()->id;
                // $notification_data['content'] = $post->name;
                // $notification = Notification::create($notification_data);
                // if ($request->hasfile('images')) {
                //     $notification_data['post_image'] = $postImage->getPostImagesAttribute();
                // }
                // $notification_data['from_user_name'] = auth()->user()->name;
                // $notification_data['post_date'] = $notification->date_time_str;

                // //send notificatioin
                $pusherController = new PusherController();
                // $pusherController->notify($notification_data);

                $matched_users = UserSkill::where('user_id', '!=', auth()->user()->id)->whereIn('skill_id', $request->skills)->get();
                foreach ($matched_users as $matched_user) {
                    $nofification_match = [];
                    $nofification_match['post_id'] = $post->id;
                    $nofification_match['from_user'] = auth()->user()->id;
                    $nofification_match['content'] = "There is a job matching your skill. Click here to see more.";
                    $nofification_match['to'] = $matched_user->user_id;
                    $nofification_match['type'] = 1;
                    $notification = Notification::create($nofification_match);
                    if ($request->hasfile('images')) {
                        $nofification_match['post_image'] = $postImage->getPostImagesAttribute();
                    }
                    $nofification_match['from_user_name'] = auth()->user()->name;
                    $nofification_match['post_date'] = $notification->date_time_str;
                    $pusherController->notify($nofification_match);
                }


                //
                Toastr::success('Your job uploaded successfully.', 'Success', ["positionClass" => "toast-top-right"]);
                return redirect()->route('jobs.index');
            } else {
                Toastr::error('Oops! Something went wrong. Please try again', 'Error', ["positionClass" => "toast-top-right"]);
                return back();
            }
        }
    }

    public function edit(Request $request, $id)
    {
        $categories = Category::all();
        $flexibles = FlexibleTime::all();
        $bugets = BudgetType::all();
        $post = Post::where('status', 'active')->where('id', $id)->with('getJobPoster', 'getPostImages', 'getBudgetTypes', 'getPostSkills')->first();

        return view('frontend.posts.edit-post-task', ['post' => $post, 'categories' => $categories, 'flexibles' => $flexibles, 'bugets' => $bugets]);
    }

    public function update(Request $request, $id)
    {
        if ($request->isMethod('post')) {
            $validation = Validator::make($request->all(), [
                'name'          => 'required',
                'address'       => 'required',
                'category'      => 'required|not_in:0',
                'date'          => 'required_without:is_flexible',
                'before_date'   => 'required_without:is_flexible',
                'is_flexible'   => 'required_without:date',
                'certain_time'  => 'required_with:is_flexible,1',
                'flexible.*'    => 'required_with:certain_time,1',
                'description'   => 'required',
                'budget'        => 'required|not_in:0',
                'amount'        => 'required',
                'skills.*'      => 'required_with:category,not_in:0',
                'images.*'      => 'required|mimes:jpeg,jpg,png'
            ]);

            if ($validation->fails()) {
                Toastr::error('Oops! Some fileds are missing', 'Error', ["positionClass" => "toast-top-right"]);
                return back()->withErrors($validation)->withInput();
            }

            $data = [];

            if (isset($request->is_flexible) && !is_null($request->is_flexible)) {
                $data['is_flexible'] = true;
                if ($request->is_flexible == true) {
                    $data['certain_time'] = isset($request->certain_time) ? true : false;
                    $data['flexible_time_id'] = implode(',', $request->flexible);
                }
            } else {
                $data['date'] = $request->date;
                $data['beforedate'] = $request->before_date;
            }

            $data['name'] = $request->name;
            $data['category_id'] = $request->category;
            $data['budget_id'] = $request->budget;
            $data['address'] = $request->address;
            $data['latitude'] = $request->latitude;
            $data['longitude'] = $request->longitude;
            $data['description'] = $request->description;
            $data['amount'] = $request->amount;
            $data['status'] = 'active';
            $data['user_id'] = auth()->user()->id;

            $post = Post::where('id', $id)->update($data);

            if ($request->hasfile('images')) {
                if (PostImage::where('post_id', $post->id)->exists()) {
                    PostImage::where('post_id', $post->id)->delete();
                }

                $imageNames = multipleUploadImage($request->file('images'), storage_path('app/public/uploads/posts/post_images/'));
                foreach ($imageNames as $img) {
                    PostImage::create(['post_id' => $post->id, 'image' => $img]);
                }
            }

            if ($post) {
                if (PostSkill::where('post_id', $post->id)->exists()) {
                    PostSkill::where('post_id', $post->id)->delete();
                }
                foreach ($request->skills as $skill) {
                    PostSkill::create(['post_id' => $post->id, 'skill_id' => $skill]);
                }
                Toastr::success('Post added Successfully', 'Success', ["positionClass" => "toast-top-right"]);
                return redirect()->route('jobs.index');
            } else {
                Toastr::error('Oops! Something went wrong. Please try again', 'Error', ["positionClass" => "toast-top-right"]);
                return back();
            }
        }
    }

    public function update_pstatus(Request $request) {
        $pid = $request->post_id;
        $p_status = $request->pstatus;
        $to_user_id = $request->touserid;
        $post = Post::where("id", $pid)->first();

        if($p_status == 0) {
            if (AcceptOffer::where('user_id', $to_user_id)->where('post_id', $pid)->where('post_user_id', $post->user_id)->where('status', "active")->exists()) {
                return response()->json(['success' => false, 'message' => 'Already offer accepted']);
            } else {
                AcceptOffer::create([
                    "user_id" => $to_user_id,
                    "post_id" => $pid,
                    "post_user_id" => $pid,
                    "status" => "active"
                ]);
            }
        }
        $data = [];
        if($p_status == 0)
            $data["status"] = "awarded";
        if($p_status == 1)
            $data["status"] = "progress";
        else if($p_status == 2)
            $data["status"] = "done";
        Post::where('id', $pid)->update($data);

        $pusherController = new PusherController();
        $nofification_data = [];
        $nofification_data['post_id'] = $pid;
        $nofification_data['from_user'] = auth()->user()->id;
        if($p_status == 0)
            $nofification_data['content'] = "The project(".$post->content.") is awared to you. Please check it.";
        if($p_status == 1)
            $nofification_data['content'] = "The project(".$post->content.") is accepted and in progress.";
        else if($p_status == 2)
            $nofification_data['content'] = "The project(".$post->content.") is completed. Please check it.";
        $nofification_data['to'] = $to_user_id;
        $nofification_data['type'] = 1;
        $notification = Notification::create($nofification_data);
        $nofification_data['from_user_name'] = auth()->user()->name;
        $nofification_data['post_date'] = $notification->date_time_str;
        $pusherController->notify($nofification_data);

        return response()->json(['state' => 1]);
    }

    public function destory($id)
    {
        if (Post::where('id', $id)->exists()) {
            PostSkill::where('post_id', $id)->delete();
            PostImage::where('post_id', $id)->delete();

            Toastr::success('Post deleted Successfully', 'Success', ["positionClass" => "toast-top-right"]);
            return redirect()->route('jobs.index');
        } else {
            Toastr::error('Oops! Something went wrong. Please try again', 'Error', ["positionClass" => "toast-top-right"]);
            return back();
        }
    }

    public function addCategory(Request $request){
        $existCategory = Category::where('name',$request['category'])->first();
        if(empty($existCategory)){
            $in['name'] = $request['category'];
            $newCategory = Category::create($in);
            $skills = !empty($request['skills']) ? explode(',',$request['skills']) : [];
            if(count($skills) > 0){
                foreach ($skills as $list){
                        $input['name'] = $list;
                        $input['category_id'] = $newCategory['id'];
                        CategorySkill::create($input);
                }
            }
        }else{
            $skills = !empty($request['skills']) ? explode(',',$request['skills']) : [];
            if(count($skills) > 0){
                foreach ($skills as $list){
                    $existSkill = CategorySkill::where('category_id',$existCategory['id'])->where('name','like','%'.$list.'%')->first();
                    if(empty($existSkill)){
                        $input['name'] = $list;
                        $input['category_id'] = $existCategory['id'];
                        CategorySkill::create($input);
                    }
                }
            }
        }
        return $allCategories = Category::where('status','active')->get();
    }
}
